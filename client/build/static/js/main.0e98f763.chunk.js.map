{"version":3,"sources":["types.ts","components/newItem.tsx","hooks/useForm.ts","App.tsx","api.ts","serviceWorker.ts","index.tsx"],"names":["TransactionType","NewItem","_ref","onSubmit","_useForm","defaultValues","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","values","setValues","handleChange","e","objectSpread","defineProperty","target","name","value","useForm","date","Date","quantity","react_default","a","createElement","Container","Form","preventDefault","type","Purchase","Input","label","onChange","placeholder","required","Group","widths","Button","fluid","App","className","purchase","axios","post","then","r","get","results","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iMAgBYA,8CCPG,SAASC,EAATC,GAAsD,IAAnCC,EAAmCD,EAAnCC,SAAmCC,ECPtD,WAKb,IAJDC,EAICC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAJuB,GAIvBG,EAC2BC,mBAASL,GADpCM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACMK,EADNH,EAAA,GACcI,EADdJ,EAAA,GAOD,MAAO,CAAEG,SAAQE,aAJI,SAACC,GACrBF,EAAUH,OAAAM,EAAA,EAAAN,CAAA,GAAKE,EAANF,OAAAO,EAAA,EAAAP,CAAA,GAAeK,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,WDDjBC,CAAQ,CACxCC,KAAM,IAAIC,KACVC,SAAU,IAFHZ,EAD4DV,EAC5DU,OAAQE,EADoDZ,EACpDY,aAWhB,OACCW,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACCH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAM5B,SARa,SAACc,GACrBA,EAAEe,iBACFlB,EAAOmB,KAAOjC,EAAgBkC,SAC9B/B,EAASW,KAMPa,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CACCC,MAAM,YACNf,KAAK,OACLgB,SAAUrB,EACVsB,YAAY,sBACZC,UAAQ,IAETZ,EAAAC,EAAAC,cAACE,EAAA,EAAKS,MAAN,CAAYC,OAAO,SAClBd,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CACCC,MAAM,WACNf,KAAK,WACLgB,SAAUrB,EACVsB,YAAY,iCACZhB,MAAOR,EAAOY,SACdO,KAAK,SACLM,UAAQ,IAETZ,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CACCC,MAAM,iBACNf,KAAK,QACLgB,SAAUrB,EACVsB,YAAY,oBACZC,UAAQ,IAETZ,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CACCC,MAAM,cACNf,KAAK,MACLgB,SAAUrB,EACVsB,YAAY,yBACZC,UAAQ,KAGVZ,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CACCC,MAAM,WACNf,KAAK,WACLgB,SAAUrB,EACVsB,YAAY,aAEbX,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CACCC,MAAM,SACNf,KAAK,OACLgB,SAAUrB,EACVsB,YAAY,WAEbX,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CACCC,MAAM,cACNf,KAAK,cACLgB,SAAUrB,EACVsB,YAAY,gBAEbX,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CACCC,MAAM,OACNf,KAAK,OACLgB,SAAUrB,EACVsB,YAAY,OACZhB,MAAOR,EAAOU,KACde,UAAQ,IAGTZ,EAAAC,EAAAC,cAACE,EAAA,EAAKW,OAAN,CAAaC,OAAK,GAAlB,mBDnEQ3C,6DGZZ,IAiBe4C,EAjBO,WACrB,OACCjB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OAEdlB,EAAAC,EAAAC,cAAC5B,EAAD,CACCE,SAAU,SAAAW,GCAP,IAAsBgC,KDCXhC,ECAViC,IAAMC,KAAK,QAASF,IDAFG,KAAK,SAAAC,GAAC,OCIxBH,IAAMI,IAAI,SDHGF,KAAK,SAACG,GACpBC,QAAQC,IAAIF,YEACG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.0e98f763.chunk.js","sourcesContent":["export interface Transaction {\n\tdescription?: string;\n\tsum: number;\n\tdate: Date;\n\ttype: TransactionType;\n\tcategory?: string;\n\ttags?: [string];\n}\n\nexport interface Purchase {\n\titem: string;\n\tquantity: number;\n\ttransaction: Transaction;\n\tprice: number;\n}\n\nexport enum TransactionType {\n\tPurchase = 0,\n\tSale\n}\n\nexport interface BackendFrontendDataTraffic {\n\te: any;\n\tdata: any;\n}\n","import React, { FormEvent } from \"react\";\nimport { Form, Container } from \"semantic-ui-react\";\nimport useForm from \"../hooks/useForm\";\nimport { Purchase, TransactionType } from \"../types\";\n\ninterface NewItemComponentProps {\n\tonSubmit: (purchase: Purchase) => any;\n}\n\nexport default function NewItem({ onSubmit }: NewItemComponentProps) {\n\tconst { values, handleChange } = useForm({\n\t\tdate: new Date(),\n\t\tquantity: 1\n\t});\n\n\tconst handleSubmit = (e: FormEvent): void => {\n\t\te.preventDefault();\n\t\tvalues.type = TransactionType.Purchase;\n\t\tonSubmit(values);\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Item Name\"\n\t\t\t\t\tname=\"item\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder=\"Name of the item(s)\"\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<Form.Group widths=\"equal\">\n\t\t\t\t\t<Form.Input\n\t\t\t\t\t\tlabel=\"Quantity\"\n\t\t\t\t\t\tname=\"quantity\"\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tplaceholder=\"Number of the items you bought\"\n\t\t\t\t\t\tvalue={values.quantity}\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Input\n\t\t\t\t\t\tlabel=\"Price per item\"\n\t\t\t\t\t\tname=\"price\"\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tplaceholder=\"Price of one item\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<Form.Input\n\t\t\t\t\t\tlabel=\"Total Price\"\n\t\t\t\t\t\tname=\"sum\"\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tplaceholder=\"Price of all the items\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</Form.Group>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Category\"\n\t\t\t\t\tname=\"category\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder=\"Category\"\n\t\t\t\t/>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Tag(s)\"\n\t\t\t\t\tname=\"tags\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder=\"Tag(s)\"\n\t\t\t\t/>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder=\"Description\"\n\t\t\t\t/>\n\t\t\t\t<Form.Input\n\t\t\t\t\tlabel=\"Date\"\n\t\t\t\t\tname=\"date\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tplaceholder=\"Date\"\n\t\t\t\t\tvalue={values.date}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\n\t\t\t\t<Form.Button fluid>ADD</Form.Button>\n\t\t\t</Form>\n\t\t</Container>\n\t);\n}\n","import { useState } from \"react\";\n\nexport default function useForm(\n\tdefaultValues: object = {}\n): {\n\tvalues: any;\n\thandleChange: (_: any) => void;\n} {\n\tconst [values, setValues] = useState(defaultValues);\n\n\tconst handleChange = (e: any) => {\n\t\tsetValues({ ...values, [e.target.name]: e.target.value });\n\t};\n\n\treturn { values, handleChange };\n}\n","import React from \"react\";\nimport { postPurchase, getPurchases } from \"./api\";\nimport NewItem from \"./components/newItem\";\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* <Transaction onSubmit={postTransaction} /> */}\n\t\t\t<NewItem\n\t\t\t\tonSubmit={values => {\n\t\t\t\t\tpostPurchase(values).then(r =>\n\t\t\t\t\t\tgetPurchases().then((results: any) => {\n\t\t\t\t\t\t\tconsole.log(results);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { Transaction, Purchase } from \"./types\";\nimport axios from \"axios\";\n\nexport function postTransaction(\n\ttransaction: Transaction\n): Promise<Transaction> {\n\treturn axios.post(\"/crud\", transaction);\n}\n\nexport function postPurchase(purchase: Purchase): Promise<Purchase> {\n\treturn axios.post(\"/crud\", purchase);\n}\n\nexport function getPurchases(): Promise<Purchase> {\n\treturn axios.get(\"/crud\");\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}